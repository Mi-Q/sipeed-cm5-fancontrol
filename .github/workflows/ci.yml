name: CI

on:
  push:
    branches: [ master, main, 'feature/*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r deploy-systemd/requirements.txt
          
      - name: Check formatting with black
        run: black --check deploy-systemd/
        
      - name: Sort imports with isort
        run: isort --check-only deploy-systemd/
        
      - name: Lint with flake8
        run: flake8 deploy-systemd/ --count --max-line-length=120 --statistics
        
      - name: Lint with pylint
        run: |
          cd deploy-systemd/
          pylint fan_control.py temp_exporter.py
        
      - name: Run tests with coverage
        run: |
          cd deploy-systemd/
          python -m pytest tests/ --cov=. --cov-report=xml
        
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./deploy-systemd/coverage.xml
          fail_ci_if_error: false

  build-and-push:
    name: Build and push images
    runs-on: ubuntu-latest
    needs: lint-and-test
    # Only build and push on main/master branch (not on PRs or feature branches)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tags
        id: tags
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          BRANCH=${GITHUB_REF#refs/heads/}
          # sanitize branch name
          SAFE_BRANCH=$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9_.-]/-/g')
          # lowercase the owner name for Docker compatibility
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          TAGS_BASE="ghcr.io/$OWNER_LC"
          # default latest only for main/master
          if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
            echo "tags=$TAGS_BASE/sipeed-temp-exporter:latest,$TAGS_BASE/sipeed-temp-exporter:$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "controller_tags=$TAGS_BASE/sipeed-cm5-fancontrol:latest,$TAGS_BASE/sipeed-cm5-fancontrol:$SHORT_SHA" >> $GITHUB_OUTPUT
          else
            echo "tags=$TAGS_BASE/sipeed-temp-exporter:$SAFE_BRANCH,$TAGS_BASE/sipeed-temp-exporter:$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "controller_tags=$TAGS_BASE/sipeed-cm5-fancontrol:$SAFE_BRANCH,$TAGS_BASE/sipeed-cm5-fancontrol:$SHORT_SHA" >> $GITHUB_OUTPUT
          fi

      - name: Build & push exporter image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deploy-kubernetes/Dockerfile.exporter
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            VERSION=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push controller image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deploy-kubernetes/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.tags.outputs.controller_tags }}
          build-args: |
            VERSION=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
